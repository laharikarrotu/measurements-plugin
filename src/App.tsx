import React, { useState } from 'react';
import { AnimatePresence, motion } from 'framer-motion';
import CustomerForm from './components/CustomerForm';
import WindowMeasurementForm from './components/WindowMeasurementForm';
import { BlindMeasurement, createBlindMeasurement } from './api/baserow';

const glassCard =
  'backdrop-blur-md bg-white/40 border border-white/30 shadow-xl rounded-2xl p-8';

const App = () => {
  const [customerId, setCustomerId] = useState<number | null>(null);
  const [customerInfo, setCustomerInfo] = useState<any>(null);

  const handleCustomerSubmit = async (data: any) => {
    // In a real application, you might create a customer record in Baserow here
    // For now, we simulate success and set a customer ID for demonstration.
    console.log('Customer submitted:', data);
    setCustomerInfo(data);
    setCustomerId(1); // Simulate a successful customer creation with a dummy ID
  };

  const handleMeasurementSubmit = async (data: BlindMeasurement) => {
    console.log('Measurement submitted:', data);
    try {
      // The createBlindMeasurement function expects CreateBlindMeasurementPayload,
      // which is Omit<BlindMeasurement, 'id'>.
      // Since `data` coming from the form is already `BlindMeasurement` (which might have `id` as optional if it was meant for creation),
      // we need to ensure we only pass fields for creation.
      const { id, ...payload } = data; // Exclude id as it's generated by Baserow
      await createBlindMeasurement(payload);
      alert('Measurement successfully saved to Baserow!');
    } catch (error) {
      console.error('Failed to save measurement to Baserow:', error);
      alert('Failed to save measurement. Please check console for details.');
    }
  };

  return (
    <div className="min-h-screen flex flex-col items-center justify-center">
      <AnimatePresence mode="wait">
        {!customerId ? (
          <motion.div
            key="customer"
            initial={{ opacity: 0, y: 40 }}
            animate={{ opacity: 1, y: 0 }}
            exit={{ opacity: 0, y: -40 }}
            transition={{ duration: 0.7, type: 'spring' }}
            className={glassCard + ' w-full max-w-lg'}
          >
            <h1 className="text-4xl font-extrabold text-center mb-6 bg-gradient-to-r from-purple-400 via-pink-400 to-blue-400 bg-clip-text text-transparent drop-shadow-lg animate-pulse">Window Measurements</h1>
            <CustomerForm onSubmit={handleCustomerSubmit} />
          </motion.div>
        ) : (
          <motion.div
            key="measurement"
            initial={{ opacity: 0, y: 40 }}
            animate={{ opacity: 1, y: 0 }}
            exit={{ opacity: 0, y: -40 }}
            transition={{ duration: 0.7, type: 'spring' }}
            className={glassCard + ' w-full max-w-2xl'}
          >
            <div className="mb-8 text-center">
              <h2 className="text-2xl font-bold mb-2 bg-gradient-to-r from-blue-400 via-purple-400 to-pink-400 bg-clip-text text-transparent drop-shadow-lg animate-pulse">Customer: {customerInfo?.customer_name}</h2>
              <div className="text-gray-700 mb-2">{customerInfo?.address}</div>
              <div className="text-gray-700 mb-2">Phone: {customerInfo?.phone_number}</div>
              <div className="text-gray-700 mb-2">Wall Color: {customerInfo?.wall_color}</div>
            </div>
            <WindowMeasurementForm customerId={customerId} onSubmit={handleMeasurementSubmit} />
          </motion.div>
        )}
      </AnimatePresence>
      <footer className="mt-10 text-white/80 text-sm text-center animate-fade-in">
        <span className="font-bold">Unique Theme</span> &mdash; Powered by <span className="text-pink-200">React</span> & <span className="text-blue-200">Tailwind</span> & <span className="text-purple-200">Framer Motion</span>
      </footer>
    </div>
  );
};

export default App; 